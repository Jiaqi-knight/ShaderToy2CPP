#version 330 core
uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iTime;                 // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4	  iMouseSpeed;           // mouse speed

uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

#define R iResolution.xy
#define pixel(ch, p) texture(ch,(p)/R)
#define ch0 iChannel0
#define ch1 iChannel1
#define PI 3.14159265

vec4 removewhite(vec4 c)
{
	float d = distance(c.xyz, vec3(1.)); //distance to white 
	return step(0.5, d)*c; 
}

float kernel(vec2 dx)
{
	return exp(-dot(dx,dx));
}

void mainImage( out vec4 O, in vec2 P )
{
	vec2 wolf_size = textureSize(ch0, 0);
	vec2 wolf_center = R*0.5;
	float wolf_scale = 0.2;
	vec2 wolf_world_size = wolf_size*wolf_scale;
	vec2 sampling_pos = clamp((P - (wolf_center - wolf_world_size*0.5))/wolf_world_size, vec2(0.), vec2(1.));
	sampling_pos = vec2(sampling_pos.x, 1. - sampling_pos.y);
	vec4 eyes = texture(ch1, sampling_pos);
	vec4 wolf = texture(ch0, sampling_pos);
	
	vec4 eye_bloom = vec3(0.);
	for(int i = -2.; i <= 2.; i++)
	{
		for(int j = -2.; j <= 2.; j++)
		{
			vec2 dx = vec2(i,j);
			vec4 eye = texture(ch1, sampling_pos + dx/100.);
			eye_bloom += kernel(dx)*vec4(removewhite(eye),1.);
		}
	}
	eye_bloom.xyz /= eye_bloom.w;
	O = wolf + eye_bloom;
}

out vec4 FragColor;
in vec2 uv;

void main()
{    
	mainImage(FragColor, uv*iResolution.xy);
	FragColor.w = 1.;
}

0(40) : error C1060: incompatible types in initialization
0(40) : error C1056: invalid initialization
0(41) : error C7011: implicit cast from "float" to "int"
0(43) : error C7011: implicit cast from "float" to "int"
0(47) : error C1068: too much data in type constructor
